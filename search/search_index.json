{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"User Guide","text":""},{"location":"#overview","title":"Overview","text":"<p>Sublime Plugin with sticky tabs, more tab closing options, tab sorting, and tab access to cloning, deleting, renaming, etc.</p> <p></p> <ul> <li>Adds <code>Close Tabs to the Left</code> for the current group.</li> <li>Adds <code>Close All Tabs</code> for the current group.</li> <li>Adds <code>Sticky Tabs</code> that allows a user to select certain tabs that will not close when a tab close command is issued on   multiple tabs.</li> <li>Adds variants of the close commands to skip unsaved files, or to dismiss saved files with no prompt.</li> <li>Overrides the built-in tab commands and 'close' and 'close_all' commands to work with sticky tabs.</li> <li>Add open last tab, reveal in sidebar or finder, copy file path, save options, and revert.</li> <li>Adds tab sorting options (based loosely on @bizoo's SortTabs plugin).</li> <li>Access clone, delete, rename, move, save, reveal, copy file path, revert, etc.</li> </ul>"},{"location":"#general-usage","title":"General Usage","text":"<p>Using TabsExtra is very straight forward once the menu is created.  TabsExtra will update the right click context menu of tabs with various useful features.  It also overrides a couple of Sublime's commands to allow for various improvements in relation to tab closing.</p>"},{"location":"#installupgrade-menu","title":"Install/Upgrade Menu","text":"<p>When first installing TabsExtra, you need to Install the new menu; this does not happen automatically.  Go to <code>Preferences-&gt;Package Settings-&gt;TabsExtra</code> and Install/Upgrade either the basic tab menu or the override menu. The basic menu's commands won't be grouped together with the built-in options because of the way Sublime Text's menus are managed.  But the override menu overrides the Default Package's tab context menu for sane, clean grouping of the commands.</p>"},{"location":"#which-commands-does-tabsextra-override-and-why","title":"Which Commands does TabsExtra Override and Why?","text":"<p>TabsExtra overrides all close commands that it can.  The only one it does not override is when the close button on a tab is clicked as that seems to side step the override API and cannot be intercepted.</p> <p>TabsExtra intercepts the close commands in order to provide enhanced close options. Here are all the intercepted commands:</p> <ul> <li><code>close_file</code>: Close called with a specific window and view id.</li> <li><code>close_by_index</code>: Close view from tab.</li> <li><code>close</code>: Close active view from global menu.</li> <li><code>close_all</code>: Close all tabs in all groups.</li> <li><code>close_others_by_index</code>: Close other tabs in current group.</li> <li><code>close_to_right_by_index</code> Close tabs to right in current group.</li> </ul> <p>This allows TabsExtra do special things like ignore certain tabs, force close without prompting the user if they want to save for every unsaved tab, or even skip unsaved tabs when closing.</p> <p>TabsExtra cannot override the tab close button.</p>"},{"location":"#new-close-options","title":"New Close Options","text":"<p>TabsExtra expands how many close options there are in the tab context menu.  It also makes them available in the quick panel as well.</p> <ul> <li>Close.</li> <li>Close other tabs.</li> <li>Close tabs to left.</li> <li>Close tabs to right.</li> <li>Close all tabs.</li> </ul> <p>And TabsExtra also provides variants that will force close unsaved tabs without annoying the user with a prompt for every unsaved tab.  It also provides variants to simply skip unsaved tabs.</p>"},{"location":"#sticky-tabs","title":"Sticky Tabs","text":"<p>TabsExtra allows users to mark a tab sticky.  This allows the tab to not close when a <code>close</code> operation is performed via a bulk close command. By default, after any bulk <code>close</code> command is run, the sticky tab properties are forgotten. You can make a tab's stickiness persist by enabling persistent_sticky.</p> <p>Warning</p> <p>TabsExtra overrides all close commands except when the user clicks the close button on a tab as this seems to be impossible to override. If this is problematic, you can disable the tab close button by disabling <code>show_tab_close_buttons</code> in your <code>Preferences.sublime-settings</code> file to prevent accidental clicking.</p> <pre><code>    // By default TabsExtra forgets a tab's \"stickiness\" when\n// any \"tab close\" command is issued.  You can make the tab's\n// \"Stickiness\" persist by enabling the following feature.\n\"persistent_sticky\": false,\n</code></pre> <p>A tab's stickiness can be controlled either the context menu or the quick panel.</p>"},{"location":"#tab-sort","title":"Tab Sort","text":"<p>TabsExtra adds various sort options to the tab context menu and quick panel.</p> <ul> <li>Sort by name.</li> <li>Sort by path.</li> <li>Sort by modified.</li> <li>Sort by created.</li> <li>Sort by file extension.</li> <li>Sort by size.</li> <li>Sort by last activated.</li> <li>Sort by syntax.</li> <li>Sort current order in reverse.</li> </ul> <p>You can control how numbers are handled in strings by enabling <code>numeric_sort</code>.  Numbers in strings are sorted alphabetically by default, but you can cause the strings to be sorted numerically if needed.</p> <pre><code>    // When sorting, normal strings will be sorted numerically.\n//\n// Example (non-numerical sort):\n//   test12 test2 test1 =&gt; test1 test12 test2\n//\n// Example (numerical sort):\n//   test12 test2 test1 =&gt; test1 test2 test12\n\"numeric_sort\": false,\n</code></pre> <p>You can also sort tabs on every file open and save by enabling <code>sort_on_load_save</code> and specifying your desired sort plugin. This will on work if Sublime's <code>preview_on_click</code> is set to <code>false</code>. If this was allowed to work with <code>preview_on_click</code>, it would cause previews to fight with moving views.</p> <pre><code>    // Sort tabs when a file is opened or saved\n\"sort_on_load_save\": false,\n</code></pre> <pre><code>    // Sort module to use when sorting on load and save\n//    \"module\": plugin that defines what view meta data is used to sort\n//    \"reverse\": (optional) sort tabs in the reverse (true|false)\n\"sort_on_load_save_command\": {\"module\": \"TabsExtra.sort.name\"}\n</code></pre> <p>Changed 1.6</p> <p><code>sort_on_load_save</code> will only apply when <code>preview_on_click</code> is <code>false</code>.</p>"},{"location":"#customizing-sort-options","title":"Customizing Sort Options","text":"<p>You can control which sort options appear by adding or removing entries from the <code>sort_layout</code>.  You can also change their orders as <code>sort_layout</code> is a list that preserves order.  Each entry contains three keys:</p> Key Required Description <code>module</code> Yes Path to sort module that is relative to Packages.  It is done in a python import style where <code>.</code> is used instead of <code>/</code>; also the <code>.py</code> extension is omitted. <code>caption</code> Yes Caption gives the name that should be displayed in menus or the quick panel for the sort method. <code>reverse</code> No Causes the sort to be returned in reverse order. <pre><code>    // Define sort layout.  Each entry contains:\n//    \"module\": plugin that defines what view meta data is used to sort\n//    \"caption\": menu name for entry\n//    \"reverse\": (optional) sort tabs in the reverse (true|false)\n\"sort_layout\": [\n{\"module\": \"TabsExtra.sort.name\", \"caption\": \"Name\"},\n{\"module\": \"TabsExtra.sort.path\", \"caption\": \"Path\"},\n{\"module\": \"TabsExtra.sort.modified\", \"caption\": \"Modified\"},\n{\"module\": \"TabsExtra.sort.created\", \"caption\": \"Created\"},\n{\"module\": \"TabsExtra.sort.type\", \"caption\": \"Extension\"},\n{\"module\": \"TabsExtra.sort.size\", \"caption\": \"Size\"},\n{\"module\": \"TabsExtra.sort.activated\", \"caption\": \"Last Activated\"},\n{\"module\": \"TabsExtra.sort.syntax\", \"caption\": \"Syntax\"},\n{\"module\": \"TabsExtra.sort.reverse\", \"caption\": \"Reverse Order\"}\n],\n</code></pre> <p>If these modules do not suit your needs, you can write your own.</p> <p>Within a sort module, there must be a run method as shown below:</p> <code>def run(views, view_data)</code> <p>This function takes a list of <code>views</code> and an empty list to append sort data to.  The <code>view_data</code> is populated by the <code>run</code> function with arrays of formatted info that will be used to sort the tabs.  Info with the most importance should be appended first.</p> <p>If you are dealing with strings that have numbers, and you wish to sort them numerically, you can import the numeric helper with the following import: <code>from TabsExtra import tab_sort_helper as tsh</code>.  Once imported you can simply run your data through <code>tab_sort_helper</code>: <code>tsh.numeric_sort(dirname(v.file_name() if v.file_name() else '')</code>.</p> <p>Parameters:</p> Parameter Description <code>views</code> List of Sublime view objects. <code>view_data</code> An empty list that should be populated by the function with relevant sort data. <p>Example:</p> <pre><code>from os.path import dirname, basename\nfrom TabsExtra import tab_sort_helper as tsh\n\n\ndef run(views, view_data):\n    for v in views:\n        view_data.append(\n            (\n                tsh.numeric_sort(dirname(v.file_name() if v.file_name() else '').lower()),\n                tsh.numeric_sort(basename(v.file_name() if v.file_name() else '').lower()),\n                v\n            )\n        )\n</code></pre>"},{"location":"#additional-menu-helper-commands","title":"Additional Menu Helper Commands","text":"<p>TabsExtra also adds a number of other miscellaneous useful commands in the tab context menu.  Many of which are already available in the quick panel.  You can control which ones show up in menu by configuring <code>menu_layout</code> in the settings file; you can even control the order.</p> <pre><code>    // Menu layout include or exclude, in whatever order you desire, the following options:\n// [\"close\", \"sticky\", \"open\", \"clone\", \"save\", \"delete\", \"rename\", \"reveal\", \"path\", \"revert\", \"sort\"]\n// When done, go to Preferences-&gt;Package Settings-&gt;TabsExtra and Install/Upgrade either\n// the default TabsMenu or the Override Menu which overrides the \"Default\" package's menu.\n\"menu_layout\": [\"close\", \"sticky\", \"open\", \"clone\", \"save\", \"delete\", \"rename\", \"reveal\", \"path\", \"revert\", \"sort\"],\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#package-control","title":"Package Control","text":"<p>The recommended way to install TabsExtra is via Package Control.  Package Control will install the correct branch on your system and keep it up to date.</p> <ol> <li> <p>Ensure Package Control is installed.  Instructions are found here.</p> </li> <li> <p>In Sublime Text, press Ctrl\uff0bShift\uff0bP (Win, Linux) or Cmd\uff0bShift\uff0bP(macOS) to bring up the quick panel and start    typing <code>Package Control: Install Package</code>.  Select the command and it will show a list of installable plugins.</p> </li> <li> <p>Start typing <code>TabsExtra</code>; when you see it, select it.</p> </li> <li> <p>Restart to be sure everything is loaded proper.</p> </li> <li> <p>Enjoy!</p> </li> </ol>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>Warning</p> <p>This is not the recommended way to install TabsExtra for the average user.  Installing this way will not get automatically updated.</p> <p>If you are forking for a pull request, you should just clone TabsExtra and run Package Control's <code>Satisfy Dependency</code> command to get all the dependencies.</p> <p>For those who want to install TabsExtra without package control, here are the steps.  It understood that some people for what ever reason will prefer manually and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.</p> <ol> <li> <p>Download the latest releases of the following dependencies and unpack or git clone in the <code>Packages</code> folder as shown    below:</p> <ul> <li>teddy_beer_maniac/sublime-text-dependency-markupsafe -&gt; <code>markupsafe</code></li> <li>teddy_beer_maniac/sublime-text-dependency-jinja2 -&gt; <code>python-jinja2</code></li> <li>packagecontrol/pygments -&gt; <code>pygments</code></li> <li>facelessuser/sublime-markdown-popups -&gt; <code>mdpopups</code></li> <li>facelessuser/sublime-markdown -&gt; <code>python-markdown</code></li> </ul> </li> <li> <p>Download and unpack or git clone the latest TabsExtra release and unpack as <code>TabsExtra</code>:</p> <ul> <li>facelessuser/TabsExtra -&gt; TabsExtra</li> </ul> </li> <li> <p>Create a folder under <code>Packages</code> called <code>00-dependencies</code> and under that folder create a file called    <code>00-dependencies.py</code>:</p> <p>Copy the following code to <code>00-dependencies.py</code> (this code was taken from Package Control):</p> <pre><code>import sys\nimport os\nfrom os.path import dirname\n\nif os.name == 'nt':\n    from ctypes import windll, create_unicode_buffer\n\nimport sublime\n\n\nif sys.version_info &gt;= (3,):\n    def decode(path):\n        return path\n\n    def encode(path):\n        return path\n\n    if os.path.basename(__file__) == 'sys_path.py':\n        pc_package_path = dirname(dirname(__file__))\n    # When loaded as a .sublime-package file, the filename ends up being\n    # Package Control.sublime-package/Package Control.package_control.sys_path\n    else:\n        pc_package_path = dirname(__file__)\n    st_version = u'3'\n\nelse:\n    def decode(path):\n        if not isinstance(path, unicode):\n            path = path.decode(sys.getfilesystemencoding())\n        return path\n\n    def encode(path):\n        if isinstance(path, unicode):\n            path = path.encode(sys.getfilesystemencoding())\n        return path\n\n    pc_package_path = decode(os.getcwd())\n    st_version = u'2'\n\n\nst_dir = dirname(dirname(pc_package_path))\n\n\ndef add(path, first=False):\n\"\"\"\n    Adds an entry to the beginning of sys.path, working around the fact that\n    Python 2.6 can't import from non-ASCII paths on Windows.\n\n    :param path:\n        A unicode string of a folder, zip file or sublime-package file to\n        add to the path\n\n    :param first:\n        If the path should be added at the beginning\n    \"\"\"\n\n    if os.name == 'nt':\n        # Work around unicode path import issue on Windows with Python 2.6\n        buf = create_unicode_buffer(512)\n        if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n            path = buf.value\n\n    enc_path = encode(path)\n\n    if os.path.exists(enc_path):\n        if first:\n            try:\n                sys.path.remove(enc_path)\n            except (ValueError):\n                pass\n            sys.path.insert(0, enc_path)\n        elif enc_path not in sys.path:\n            sys.path.append(enc_path)\n\n\ndef remove(path):\n\"\"\"\n    Removes a path from sys.path if it is present\n\n    :param path:\n        A unicode string of a folder, zip file or sublime-package file\n    \"\"\"\n\n    try:\n        sys.path.remove(encode(path))\n    except (ValueError):\n        pass\n\n    if os.name == 'nt':\n        buf = create_unicode_buffer(512)\n        if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n            path = buf.value\n        try:\n            sys.path.remove(encode(path))\n        except (ValueError):\n            pass\n\n\ndef generate_dependency_paths(name):\n\"\"\"\n    Accepts a dependency name and generates a dict containing the three standard\n    import paths that are valid for the current machine.\n\n    :param name:\n        A unicode string name of the dependency\n\n    :return:\n        A dict with the following keys:\n         - 'ver'\n         - 'plat'\n         - 'arch'\n    \"\"\"\n\n    packages_dir = os.path.join(st_dir, u'Packages')\n    dependency_dir = os.path.join(packages_dir, name)\n\n    ver = u'st%s' % st_version\n    plat = sublime.platform()\n    arch = sublime.arch()\n\n    return {\n        'all': os.path.join(dependency_dir, 'all'),\n        'ver': os.path.join(dependency_dir, ver),\n        'plat': os.path.join(dependency_dir, u'%s_%s' % (ver, plat)),\n        'arch': os.path.join(dependency_dir, u'%s_%s_%s' % (ver, plat, arch))\n    }\n\n\ndef add_dependency(name, first=False):\n\"\"\"\n    Accepts a dependency name and automatically adds the appropriate path\n    to sys.path, if the dependency has a path for the current platform and\n    architecture.\n\n    :param name:\n        A unicode string name of the dependency\n\n    :param first:\n        If the path should be added to the beginning of the list\n    \"\"\"\n\n    dep_paths = generate_dependency_paths(name)\n\n    for path in dep_paths.values():\n        if os.path.exists(encode(path)):\n            add(path, first=first)\n\n\nadd_dependency('pygments')\nadd_dependency('markupsafe')\nadd_dependency('python-markdown')\nadd_dependency('python-jinja2')\nadd_dependency('mdpopups')\n</code></pre> </li> <li> <p>Restart and enjoy.</p> </li> </ol>"},{"location":"installation/#git-cloning","title":"Git Cloning","text":"<ol> <li> <p>Quit Sublime Text.</p> </li> <li> <p>Open a terminal and enter the following.  For dependencies replace the URL with the appropriate URL, and the    appropriate folder to check it out to:</p> <pre><code>cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/TabsExtra.git TabsExtra\n</code></pre> </li> <li> <p>Restart Sublime Text.</p> </li> </ol>"},{"location":"about/contributing/","title":"Contributing &amp; Support","text":""},{"location":"about/contributing/#overview","title":"Overview","text":"Sublime Versions Description ST3 Fully supported and actively maintained. <p>Contribution from the community is encouraged and can be done in a variety of ways:</p> <ul> <li>Bug reports.</li> <li>Reviewing code.</li> <li>Code patches via pull requests.</li> <li>Documentation improvements via pull requests.</li> </ul>"},{"location":"about/contributing/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal.</p> <p> GitHub Sponsors  PayPal</p>"},{"location":"about/contributing/#bug-reports","title":"Bug Reports","text":"<ol> <li> <p>Please read the documentation and search the issue tracker to try to find the answer to your question    before posting an issue.</p> </li> <li> <p>When creating an issue on the repository, please provide as much info as possible:</p> <ul> <li>Provide environment information by running <code>Preferences-&gt;Package Settings-&gt;TabsExtra-&gt;Support Info</code>.  The    information will be copied to the clipboard; paste the info in issue.</li> <li>Errors in console.</li> <li>Detailed description of the problem.</li> <li>Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce   the issue, please provide the text in a plain text format as well for easy copy/paste.</li> </ul> <p>The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.</p> </li> <li> <p>Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses    to respond to follow up questions will be marked as stale and closed.</p> </li> </ol>"},{"location":"about/contributing/#reviewing-code","title":"Reviewing Code","text":"<p>Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.</p>"},{"location":"about/contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.</p> <ol> <li> <p>Please describe the change in as much detail as possible so I can understand what is being added or modified.</p> </li> <li> <p>If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on    how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been    resolved).</p> </li> <li> <p>Please reference and link related open bugs or feature requests in this pull if applicable.</p> </li> <li> <p>Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the    behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to    existing features if you have not provided documentation describing the feature.</p> </li> </ol> <p>Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.</p>"},{"location":"about/contributing/#running-validation-tests","title":"Running Validation Tests","text":"<p>Tip</p> <p>If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):</p> <pre><code>chmod +x run_tests.sh\n./run_tests.sh\n</code></pre> <p>There are a couple of dependencies that must be present before running the tests.</p> <ol> <li> <p>As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests.</p> </li> <li> <p>Unit tests are run with <code>pytest</code>.  You can install <code>pytest</code> via:</p> <pre><code>pip install pytest\n</code></pre> <p>The tests should be run from the root folder of the plugin by using the following command:</p> <pre><code>py.test .\n</code></pre> </li> <li> <p>Linting is performed on the entire project with <code>flake8</code>, <code>flake8_docstrings</code>, <code>pep8-naming</code>.  These can be installed    via:</p> <pre><code>pip install flake8\npip install flake8_docstrings\npip install pep8-naming\n</code></pre> <p>Linting is performed with the following command:</p> <pre><code>flake8 .\n</code></pre> </li> </ol>"},{"location":"about/contributing/#documentation-improvements","title":"Documentation Improvements","text":"<p>A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.</p> <p>You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs, the Material theme, and PyMdown Extensions to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is <code>mkdocs serve</code> from the root directory. You can then view the documents at <code>localhost:8000</code>.</p>"},{"location":"about/license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2014 - 2023 Isaac Muse</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}